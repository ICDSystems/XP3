/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #CATEGORY "" 
#CATEGORY "46" "XP3" // Custom
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""
#USER_SIMPLSHARP_LIBRARY "ICD.Connect.Protocol.Crosspoints_SimplSharp"

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
STRING_INPUT _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, Digital_In[255], _SKIP_, Analog_In[255], _SKIP_, Serial_In[255];
// STRING_INPUT 
// BUFFER_INPUT 

ANALOG_OUTPUT _SKIP_, _SKIP_, _SKIP_, Status, ControlCrosspointsConnected, _SKIP_;
STRING_OUTPUT Digital_Out, _SKIP_, Analog_Out, _SKIP_, Serial_Out;

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
INTEGER_PARAMETER SystemId, CrosspointId;
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
STRING_PARAMETER CrosspointName[255];

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// INTEGER Var;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING
SimplPlusXSigEquipmentCrosspointShim crosspoint;


/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
Callback Function DigitalSigReceivedXSigCallback(string value)
{
	if (IsSignalDefined(Digital_Out))
	{
		Digital_Out = value;
	}
}

Callback Function AnalogSigReceivedXSigCallback(string value)
{
	if (IsSignalDefined(Analog_Out))
		Analog_Out = value;
}

Callback Function SerialSigReceivedXSigCallback(string value)
{
	if (IsSignalDefined(Serial_Out))
	{
		Serial_Out = value;
	}
}

Callback Function CrosspointStatusCallback(integer cstatus)
{
	Status = cstatus;
}

Callback Function ControlCrosspointsConnectedCallback(integer count)
{
	ControlCrosspointsConnected = count;
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

CHANGE Digital_In
{
	//string value[255];

	//value = Digital_In;

	crosspoint.SendXSig(Digital_In);
}

CHANGE Analog_In
{
	//string value[255];

	//value = Analog_In;

	crosspoint.SendXSig(Analog_In);
}

CHANGE Serial_In
{
	//string value[255];

	//value = Serial_In;

	crosspoint.SendXSig(Serial_In);
}


/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	RegisterDelegate(crosspoint, DigitalSigReceivedXSigCallback, DigitalSigReceivedXSigCallback);
	RegisterDelegate(crosspoint, AnalogSigReceivedXSigCallback, AnalogSigReceivedXSigCallback);
	RegisterDelegate(crosspoint, SerialSigReceivedXSigCallback, SerialSigReceivedXSigCallback);
	RegisterDelegate(crosspoint, CrosspointStatusCallback, CrosspointStatusCallback);
	RegisterDelegate(crosspoint, ControlCrosspointsConnectedCallback, ControlCrosspointsConnectedCallback);

	crosspoint.Location = GetSymbolInstanceName();
	crosspoint.SetSystemId(SystemId);
	crosspoint.SetCrosspointId(CrosspointId);
	crosspoint.SetCrosspointName(CrosspointName);
	crosspoint.Name = CrosspointName;
	crosspoint.InstantiateCrosspoint();
}


